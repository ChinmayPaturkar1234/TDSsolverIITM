import os
import logging
import tempfile
import google.generativeai as genai
from utils import extract_zip, process_files
from processors import process_csv, process_text_file, parse_json

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Initialize Google Gemini API client
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

def process_request(question, files):
    """
    Process the request by analyzing the question and files.
    
    Args:
        question (str): The question to answer
        files (list): List of uploaded files
    
    Returns:
        str: The answer to the question
    """
    logger.debug(f"Processing request with question: {question}")
    
    # Process any uploaded files
    file_contents = {}
    extracted_files = []
    
    # Create a temporary directory for file processing
    with tempfile.TemporaryDirectory() as temp_dir:
        # Process uploaded files
        for file in files:
            # Skip empty files or files with empty filenames
            if not file or not file.filename or file.filename == '':
                logger.warning("Skipping empty file or file with no filename")
                continue
                
            # Sanitize filename to prevent directory traversal
            safe_filename = os.path.basename(file.filename)
            
            # Create a valid file path
            file_path = os.path.join(temp_dir, safe_filename)
            logger.debug(f"Saving file to: {file_path}")
            
            # Save the file
            try:
                file.save(file_path)
                logger.debug(f"Successfully saved file: {safe_filename}")
                
                # Check if the file is a zip file
                if safe_filename.endswith('.zip'):
                    logger.debug(f"Extracting zip file: {safe_filename}")
                    extracted_files = extract_zip(file_path, temp_dir)
                    logger.debug(f"Extracted files: {extracted_files}")
                else:
                    extracted_files.append(file_path)
            except Exception as e:
                logger.error(f"Error saving file {safe_filename}: {str(e)}")
                raise
        
        # Process extracted files based on type
        for file_path in extracted_files:
            file_content = None
            file_name = os.path.basename(file_path)
            file_extension = os.path.splitext(file_path)[1].lower()
            
            try:
                # Process based on file extension
                if file_extension in ['.csv', '.tsv']:
                    logger.debug(f"Processing CSV/TSV file: {file_path}")
                    file_content = process_csv(file_path)
                elif file_extension in ['.txt', '.log', '.md']:
                    logger.debug(f"Processing text file: {file_path}")
                    file_content = process_text_file(file_path)
                elif file_extension == '.json':
                    logger.debug(f"Processing JSON file: {file_path}")
                    file_content = parse_json(file_path)
                elif file_extension in ['.py', '.js', '.html', '.css', '.xml']:
                    logger.debug(f"Processing code file: {file_path}")
                    file_content = process_text_file(file_path)
                else:
                    # For unsupported file types, try to read it as text
                    logger.debug(f"Attempting to process unknown file type: {file_path}")
                    try:
                        file_content = process_text_file(file_path)
                    except Exception as e:
                        logger.warning(f"Could not process file as text: {str(e)}")
                        file_content = f"Unsupported file type: {file_extension}"
            
            except Exception as e:
                logger.error(f"Error processing file {file_name}: {str(e)}")
                file_content = f"Error processing file: {str(e)}"
            
            # Store the file content
            if file_content is not None:
                file_contents[file_name] = file_content
    
    # Generate answer using LLM
    answer = generate_answer(question, file_contents)
    return answer

def generate_answer(question, file_contents):
    """
    Generate an answer using the Google Gemini API.
    
    Args:
        question (str): The question to answer
        file_contents (dict): Dictionary of file contents
    
    Returns:
        str: The answer generated by the model
    """
    logger.debug("Generating answer with Google Gemini")
    
    # Construct the prompt with file contents if available
    prompt = f"Question: {question}\n\n"
    
    if file_contents:
        prompt += "File contents:\n"
        for file_name, content in file_contents.items():
            prompt += f"File: {file_name}\n{content}\n\n"
    
    # System instructions
    system_prompt = (
        "You are an expert in Tools in Data Science from IIT Madras' Online Degree program. "
        "The user has provided a question from one of the 5 graded assignments. "
        "Follow these strict rules when providing your answer:\n"
        "1. Analyze the question and any provided file contents carefully.\n"
        "2. Provide ONLY the exact answer value that should be submitted - nothing else.\n"
        "3. Do not include explanations or any additional text.\n"
        "4. If the question requires extracting a value from a CSV file's 'answer' column, return only that value.\n"
        "5. If the question asks for a code output, provide only that output text.\n"
        "6. Provide the shortest possible valid answer.\n"
        "7. Make sure your answer can be directly entered in the assignment submission field.\n"
        "8. If the answer is a number, provide just the number without units unless explicitly requested.\n"
        "9. Your response must be a single value or short text that directly answers the assignment question."
    )
    
    combined_prompt = system_prompt + "\n\n" + prompt
    
    try:
        # Configure the model
        gemini_model = genai.GenerativeModel('gemini-1.5-pro')
        
        # Generate the response
        response = gemini_model.generate_content(
            combined_prompt,
            generation_config=genai.GenerationConfig(
                temperature=0.1,  # Lower temperature for more deterministic answers
                max_output_tokens=500,
                top_p=0.95,
            )
        )
        
        # Extract the answer from the response
        answer = response.text.strip()
        
        # Clean up the answer - apply multiple stages of cleanup to ensure 
        # we get only the exact answer value
        
        # First, split into lines and remove any empty ones
        lines = [line.strip() for line in answer.split('\n') if line.strip()]
        
        if len(lines) > 1:
            # If there are multiple lines, apply heuristics to find the actual answer
            
            # Check for common answer patterns
            for line in lines:
                # Check if line starts with "Answer:" or similar
                if line.lower().startswith(('answer:', 'the answer is:', 'result:')):
                    answer = line.split(':', 1)[1].strip()
                    break
            else:
                # If no "Answer:" prefix found, use the shortest substantive line
                # Filter out very short lines (less than 1 char) which might be punctuation
                valid_lines = [line for line in lines if len(line) >= 1]
                if valid_lines:
                    # Sort by length and take the shortest non-empty line
                    answer = min(valid_lines, key=len)
        else:
            # If only one line, use it directly
            answer = lines[0]
        
        # Additional cleaning: remove quotes, if they're wrapping the entire answer
        answer = answer.strip('"\'')
        
        # Remove "The answer is: " or similar prefixes if they exist
        common_prefixes = [
            "the answer is ", "answer: ", "result: ", "value: ", 
            "the value is ", "output: ", "the output is "
        ]
        for prefix in common_prefixes:
            if answer.lower().startswith(prefix):
                answer = answer[len(prefix):].strip()
        
        return answer
        
    except Exception as e:
        logger.error(f"Error generating answer: {str(e)}")
        raise
